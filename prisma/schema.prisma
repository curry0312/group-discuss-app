// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id           String    @id
    name         String
    friends      User[]    @relation("UserFollows")
    friendsOf    User[]    @relation("UserFollows")
    posts        Post[]
    memberGroups Group[]   @relation("GroupMembers")
    comments     Comment[]
    likes        Like[]
    ownerGroups  Group[]
}

model Group {
    id        String   @id @default(cuid())
    name      String
    public    Boolean
    image     String
    owner     User     @relation(fields: [ownerId], references: [id])
    ownerId   String
    members   User[]   @relation("GroupMembers")
    posts     Post[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId])
}

model Post {
    id       String    @id @default(uuid())
    content  String
    author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String
    comments Comment[]
    likes    Like[]
    group    Group     @relation(fields: [groupId], references: [id])
    groupId  String
    createAt DateTime  @default(now())
    updateAt DateTime  @updatedAt

    @@index([authorId])
    @@index([groupId])
}

model Comment {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    likes  Like[]

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    @@index([postId])
    @@index([userId])
}

model Like {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId String?

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    @@index([postId])
    @@index([commentId])
    @@index([userId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id                 String    @id
    name               String
    image              String
    friends            User[]    @relation("UserFriends")
    friendsOf          User[]    @relation("UserFriends")
    unCheckedFriends   User[]    @relation("UserUnCheckedFriends")
    unCheckedFriendsOf User[]    @relation("UserUnCheckedFriends")
    posts              Post[]
    memberGroups       Group[]   @relation("GroupMembers")
    comments           Comment[]
    likes              Like[]
    ownerGroups        Group[]
    createdAt          DateTime  @default(now())
}

model Group {
    id        String   @id @default(cuid())
    name      String
    public    Boolean
    image     String
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    members   User[]   @relation("GroupMembers")
    posts     Post[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id])
    @@index([name])
    @@index([ownerId])
}

model Post {
    id        String    @id @default(uuid())
    content   String    @db.VarChar(1000)
    author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    comments  Comment[]
    likes     Like[]
    group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@index([authorId])
    @@index([groupId])
}

model Comment {
    id       String @id @default(uuid())
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String
    post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId   String
    content  String
    likes    Like[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([postId])
    @@index([authorId])
}

model Like {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String?
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([postId])
    @@index([commentId])
    @@index([userId])
}
